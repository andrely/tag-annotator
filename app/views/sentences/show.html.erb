<h1>Sentence <%= @sentence.text_index + 1 %> from "<%= @sentence.tagged_text.title %>"</h1>

<%= javascript_tag "var AUTH_TOKEN = '#{form_authenticity_token}';" if protect_against_forgery? %>

<script type="text/javascript">
    var focus = 0;

    /* guard variable in order to aviod adding/removiung shortcuts
     * multiple times in Chrome on Windows.*/
    var shortcutsEnabled = false;

    length = <%= @sentence.length -%>;

    Event.observe(window, 'load', function() {
        updateTag(focus);
        addShortcuts();
    });

    function updateTag(index) {
        $$('span.word').each(function(e) { e.style.color = 'black' })
        $$('div.tag').each(function(e) { e.style.display = 'none' })

        $('word-' + index).style.color = 'red'
        $('tag-' + index).style.display = 'block'
        // $('tag-div').textContent = index.toString();
        focus = index
    }

    function toggleTag(index) {
        id = "tag_" + focus + "_" + (index + 1);
        elt = $(id)
        // elt.checked = !elt.checked
        elt.click()
    }

    function addShortcuts() {
        if (shortcutsEnabled) {
            return;
        }

        shortcut.add("space", function() {
            focus = focus + 1;
            if (focus >= length) { focus = 0; }
            updateTag(focus);},
            {'disable_in_input': true }
        );

        shortcut.add(".", function() {
            focus = focus - 1;
            if (focus < 0) { focus = length - 1; }
            updateTag(focus);},
            {'disable_in_input': true }
        );

        shortcut.add("right", function() {
            window.location="<%= url_for :action => 'show', :id => @next_sent.id if @next_sent %>"; },
            {'disable_in_input': true }
        );
        shortcut.add("left", function() {
            window.location="<%= url_for :action => 'show', :id => @prev_sent.id if @prev_sent %>"; },
            {'disable_in_input': true }
        );
        shortcut.add("1", function() { toggleTag(0); }, {'disable_in_input': true });
        shortcut.add("2", function() { toggleTag(1); }, {'disable_in_input': true });
        shortcut.add("3", function() { toggleTag(2); }, {'disable_in_input': true });
        shortcut.add("4", function() { toggleTag(3); }, {'disable_in_input': true });
        shortcut.add("5", function() { toggleTag(4); }, {'disable_in_input': true });
        shortcut.add("6", function() { toggleTag(5); }, {'disable_in_input': true });
        shortcut.add("7", function() { toggleTag(6); }, {'disable_in_input': true });
        shortcut.add("8", function() { toggleTag(7); }, {'disable_in_input': true });
        shortcut.add("9", function() { toggleTag(8); }, {'disable_in_input': true });
        shortcut.add("0", function() { toggleTag(9); }, {'disable_in_input': true });

        shortcutsEnabled = true;
    }

    function removeShortcuts() {
        if (!shortcutsEnabled) {
            return;
        }

        shortcut.remove("space");
        shortcut.remove(".");
        shortcut.remove("right");
        shortcut.remove("left");
        shortcut.remove("1");
        shortcut.remove("2");
        shortcut.remove("3");
        shortcut.remove("4");
        shortcut.remove("5");
        shortcut.remove("6");
        shortcut.remove("7");
        shortcut.remove("8");
        shortcut.remove("9");
        shortcut.remove("0");

        shortcutsEnabled = false;
    }

    function toggleOBTWordFormInput(id) {
        $('change_obt_word_form_' + id).disabled = !$('change_obt_word_form_' + id).disabled;
    }
    /**
     * Updates the content of the word browser with a given sentence.
     *
     * @param id Id for the sentence which should be displayed.
     * @param index Word index to show as selected after update.
     */
    function updateWordBrowser(id, index) {
        new Ajax.Updater('word_browser', 'sentences/word_browser/' + id,
                {asynchronous:true, evalScripts:true,
                 parameters: 'authenticity_token=' + AUTH_TOKEN,
                 onComplete: function (r) { updateTag(index); },
                 onFailure: function(r) { showError('failed to reload word browser');}});
    }
</script>

<!-- Renders the word browser -->
<div id='word_browser'>
    <%= render(:partial => 'word_browser',
               :locals => {:words => @words}) %>
</div>

<p>

<div id='tag-div'/>
<% @words.each do |wform| -%>
    <% w_idx = wform.sentence_index -%>
    <div id='tag-<%= w_idx %>' class='tag' style='display:none'>
        <%= render(:partial => "word_details", :locals => { :wform => wform, :sent => @sentence }) %>
    </div>
<% end -%>

</p>

<div id='feedback'>
</div>

<div style="position:  absolute;  bottom:  0;">
  <p>
  <div>
    <%= link_to "Sentence list",
                :controller => 'tagged_texts', :action => 'list',
                :id => @sentence.tagged_text_id, :anchor => @sentence.text_index %>
    <%= link_to "Text index", :controller => 'tagged_texts' %>
    <%= link_to "Previous", :id => @prev_sent.id if @prev_sent %>
    <%= link_to "Next", :id => @next_sent.id if @next_sent %>

    <%= render :partial => 'add_bookmark' %>
  </div>

  <p>
    This display shows a corpus sentence and the tags associated with it. The tags are displayed for one word at
    a time, with checkboxes indicating which tag(s) are marked as correct. Use the mouse to click on the words
    and checkboxes, or use the following keyboard shortcuts:
  <p>
  <ul>
    <li><b>Space:</b> Selects the next word in the sentence.</li>
    <li><b>. (period):</b> Selects the previous word in this sentence.</li>
    <li><b>&rarr;:</b> Proceed to the next sentence in the corpus.</li>
    <li><b>&larr;:</b> Return to the previous sentence in the corpus.</li>
    <li><b>0-9:</b> Toggle the correct checkbox on the ten first tags (0 toggles the tenth tag).</li>
  </ul>
  <p>
    The <b>Bookmark</b> link adds a bookmark for this sentence that can be accessed though the bookmarks link in
    the corpus index.
</div>
